package com.milaboratory.mitcr;

import cc.redberry.pipe.CUtils;
import cc.redberry.pipe.OutputPort;
import cc.redberry.pipe.blocks.Merger;
import cc.redberry.pipe.blocks.ParallelProcessor;
import cc.redberry.pipe.util.CountingOutputPort;
import com.milaboratory.core.clone.Clone;
import com.milaboratory.core.clone.CloneSetClustered;
import com.milaboratory.core.gsegment.DefaultSegmentLibrary;
import com.milaboratory.core.gsegment.Gene;
import com.milaboratory.core.gsegment.SegmentLibrary;
import com.milaboratory.core.gsegment.Species;
import com.milaboratory.core.sequencing.io.fastq.SFastqReader;
import com.milaboratory.core.sequencing.io.fastq.quality.QualityStringFormat;
import com.milaboratory.core.sequencing.read.SSequencingRead;
import com.milaboratory.mitcr.cdrextraction.CDR3ExtractionResult;
import com.milaboratory.mitcr.cdrextraction.CDR3ExtractorFactoryFromSRead;
import com.milaboratory.mitcr.cdrextraction.CDR3ExtractorParameters;
import com.milaboratory.mitcr.cdrextraction.Strand;
import com.milaboratory.mitcr.clonegenerator.CloneGenerator;
import com.milaboratory.mitcr.clonegenerator.LQMappingCloneGenerator;
import com.milaboratory.mitcr.clonegenerator.SequencingReadLink;
import com.milaboratory.mitcr.clsexport.ClsExporter;
import com.milaboratory.mitcr.clusterization.ClonesClusterizer;
import com.milaboratory.mitcr.clusterization.ClusterizationType;
import com.milaboratory.mitcr.clusterization.PenaltyBasedFastClusterizer;
import com.milaboratory.mitcr.qualitystrategy.IlluminaQualityInterpretationStrategy;
import com.milaboratory.mitcr.qualitystrategy.QualityInterpretationStrategy;
import com.milaboratory.mitcr.vdjmapping.*;
import com.milaboratory.util.CompressionType;
import com.milaboratory.util.ProgeressReporter;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicLongArray;

public class SimpleTest {
    public static void main(String[] args) throws IOException, InterruptedException {
        final String input = args[0];
        CompressionType compressionType = CompressionType.None;
        if (input.endsWith(".gz"))
            compressionType = CompressionType.GZIP;

        SFastqReader reads = new SFastqReader(input,
                args.length > 1 ?
                        QualityStringFormat.Illumina13 : QualityStringFormat.Illumina18, compressionType);

        new Thread(new ProgeressReporter("Processing sequences: ", reads)).start();

        Merger<SSequencingRead> readsB = new Merger<>();
        //readsB.merge(new CountLimitingOutputPort<>(reads, 100000L));
        readsB.merge(reads);
        readsB.start();

        CountingOutputPort<SSequencingRead> countingPort;

        final QualityInterpretationStrategy qStrategy = new IlluminaQualityInterpretationStrategy((byte) 20);

        AnalysisListenerImpl listener = new AnalysisListenerImpl(new Collector(), new Collector());

        //Default parameters
        CDR3ExtractorParameters parameters = new CDR3ExtractorParameters(new VJSegmentMapperParameters(-4, 1, 12, 3, AlignmentDirection.Both),
                // new VJSegmentMapperParameters(-3, 2, 7, -2, AlignmentDirection.InsideCDR3),
                new VJSegmentMapperParameters(-1, 4, 12, -2, AlignmentDirection.Both),
                new DSegmentMapperParameters(6), Strand.Both, true);

        SegmentLibrary library = DefaultSegmentLibrary.load();

        CDR3ExtractorFactoryFromSRead extractorFactory = new CDR3ExtractorFactoryFromSRead(Species.HomoSapiens, Gene.TRB, parameters, library,
                qStrategy, listener);

        OutputPort<CDR3ExtractionResult<SSequencingRead>> results = new ParallelProcessor<>(countingPort = new CountingOutputPort<SSequencingRead>(readsB), extractorFactory, Runtime.getRuntime().availableProcessors());

        CloneGenerator generator = new LQMappingCloneGenerator(.15f, true, qStrategy, 3);

        CUtils.drain(results, generator);

        readsB.join();
        ((ParallelProcessor) results).join();

        ClonesClusterizer clusterizer = new PenaltyBasedFastClusterizer(.1f, ClusterizationType.OneMismatch);

        System.out.println("Clusterization.");
        long start = System.currentTimeMillis();

        CloneSetClustered clusteredClones = clusterizer.cluster(generator.getCloneSet());

        System.out.println("Done in " + (System.currentTimeMillis() - start) + "ms.");

        long total = countingPort.getCount();

        CloneSetClustered cloneSet = clusteredClones;

        ClsExporter.export(cloneSet, "Test analysis", input, library, (int) total, "tst.cls");

        //try (PrintWriter pw = new PrintWriter("out.txt")) {
        long processed = 0, added = 0, s = 0;

        for (Clone clone : cloneSet.getClones()) {
            //pw.println(clone.getCDR3AA() + "\t" + clone.getCount());
            processed += clone.getCount();
            s += clone.getCount();
            for (SequencingReadLink links : clone.getBackwardLinks()) {
                s--;
                if (links.isAdditional())
                    added++;
            }
        }

        System.out.println("V");
        ((Collector) listener.getVListener()).sout();
        System.out.println("J");
        ((Collector) listener.getJListener()).sout();

        System.out.println(total);
        System.out.println(processed);
        System.out.println(added);
        System.out.println(s);
        //}
    }

    public static class Collector implements VJMapperListener {
        private final AtomicLongArray scores = new AtomicLongArray(200);

        @Override
        public void mappingFound(VJSegmentMappingResult result, Object source) {
            int score = (int) result.getScore();
            if (score < 0 || score >= 200)
                return;
            scores.getAndIncrement(score);
        }

        @Override
        public void mappingDropped(VJSegmentMappingResult result, Object source) {
            int score = (int) result.getScore();
            if (score < 0 || score >= 200)
                return;
            scores.getAndIncrement(score);
        }

        public void sout() {
            long sum = 0;
            for (int i = 0; i < scores.length(); ++i) {
                sum += scores.get(i);
                if (scores.get(i) > 0)
                    System.out.println(i + ": " + scores.get(i));
            }
            System.out.println("Sum: " + sum);
        }

        @Override
        public void noMapping(Object source) {
        }
    }
}
